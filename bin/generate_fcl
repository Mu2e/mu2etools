#!/usr/bin/perl -w
#
# A.Gaponenko, 2015
#

use autodie;
use Getopt::Long;
use Digest;
use File::Basename;
use File::Copy;
use File::Temp qw/tempfile/;
use English qw( -no_match_vars ) ; # Avoids regex performance penalty

use Mu2eFilename;

use Data::Dumper; # for debugging

# information from an --auxinput specification (same as mu2eart's --fclin spec)
# listFileName is the name of the file specified on cmdline,
# filenames is the content of that file
# prolog==1 requests to place fcl defs in a BEGIN_PROLOG/END_PROLOG block.
use Class::Struct Mu2eAuxInSpec =>
    [numFilesPerJob=>'$', fclkey=>'$', prolog=>'$', listFileName=>'$', filenames=>'*@',
     # @rsr is a work area to keep "resampling refs": each element is a reference
     # to a different entry in @filenames.  sampleFileNames() draws random
     # refs from @rsr, and removes them from the array.  If there are not enough
     # entries in @rsr to generate a set of filenames for the next fcl file,
     # @rsr is reset to contain a complete set of @filenames refs again.
     rsr=>'@'
    ];

my $maxUniqueEngines = 20;

my $ignoreSource = 0;

#================================================================
sub usage() {
    my $self = basename($0);
    return <<EOF
Usage:
        $self \\
         {--description=<string>|--auto-description} \\
         --dsconf=<string> \\
         [--dsowner=<string>] \\
         { --inputs=<list-file-name> --merge-factor=<int> |\\
           --run-number=<int> [--first-subrun=<int>] \\
           --events-per-job=<int> --njobs=<int> }\\
         [--ignore-source] \\
         [--old-seeds=<seeds-file-name>] \\
         [--auxinput=<numFiles>:<fclVarName>:<filelist>] \\
         [--debug-seed=<int>] \\
         [--max-engines=<int>] \\
         [--verbose] [--help] \\
         {--embed|--include} template-fcl-file

That will produce a number fcl files, either --njobs or determined
from the number of files in the --inputs list and the --merge-factor.
File names will be constructed using --description, --dsconf, and
other pieces of information according to the Mu2e convention
http://mu2e.fnal.gov/atwork/computing/tapeUpload.shtml
Note that the name of each file in the Mu2e data handling system must
be unique. If --dsowner is not specified, the current username will be
used. (If the script is run by the mu2epro user, the default dsowner
is mu2e.)   The --auto-description option can be used only with --inputs
and sets the description field to that of the input files; all input
files in that case must have the same description.

The content of the given template-fcl-file will be copied to each
output fcl file if the --embed switch is specified.  In case the
--include option is used, the output files will instead contain an
#include template-fcl-file
directive.  In this case the template-fcl-file string must be a
relative file name,  locatable at the job run time via the
FHICL_FILE_PATH environment variable.

Examples:
           --embed   ./template.fcl
           --embed   JobConfig/beam/beam_g4s1.fcl
           --include JobConfig/beam/beam_g4s1.fcl

Whether the '--inputs' or '--njobs' group of parameters should be
provided is determined by the source type in the template-fcl-file,
and source configuration is set appropriately in output fcl files.
The '--ignore-source' option overrides that determination.  When this
option is specified, one must provide the --njob group of parameters
on the command line.  Individual job parameters (like the subrun
number) will be written to a mu2emetadata block instead of assigned to
the source module.  This option is meant to be used for special cases,
such as running a non-art event generator (e.g. CORSIKA) in the same
grid process as an art job that consumes the generator output.

The --old-seeds option can be used to provide to a text file with a
list of seeds that should not be used in the current generation.
If SeedService is defined in the template fcl file, generate_fcl
writes out a list of all seeds used in the current invocation merged
with the --old-seeds list, if any.  This output file can be used with
the --old-seeds option if one decides to add statistics to that fcl
dataset later; it is necessary to guarantee that each simulation job
uses a unique random seed.

If adding statistics to an existing fcl dataset, remember to specify
an appropriate --first-subrun in addition to --old-seeds.

The --auxinput option sets the given fcl file variable so that it
points to the files in the given filelist.  The numFiles parameter,
which can be a natural number or the literal 'all', specifies how
many randomly selected files from the list should be used per job.
The --auxinput option can be repeated several times, the effect is
cumulative.  If fclVarName starts with the '\@' sign, it will generate
a BEGIN_PROLOG/END_PROLOG block with a fclVarName definition, which
should be referred to using the \@local::fclVarName syntax in the
template fcl file.  Prolog definitions use the \@protect_ignore: FHiCL
bindings, therefore take precedence over any subsequent re-definitions
of the same variable in the template file.  If the variable name does
not start with the '\@' sign, an assignment to that variable will be
appended to the user fcl file.

The script will create a subdirectory '000' and write up to a 1000
output fcl files there.  If there are more files to be written,
subdirectories '001' etc.  will be created as needed, so that each
directory will hold no more than 1000 fcl files.

For each fcl file a matching json file will be produced, suitable to
register the job config with SAM.

The --debug-seed option is used to develop the generate_fcl script
itself.  It allows to obtain a reproducible sequence of pseudorandom
numbers used in the code.

The square brackets [] above denote optional settings, and
{alternative1|alternative2} constructs denote mutually exclusive
alternatives.  All option names may be abbreviates as long as this is
unambiguous.  (For example, '--verbose' and '--verb' mean the same
thing.)

EOF
}

#================================================================
# constant strings used in more than one place

use constant fclkey_SeedService => ( 'services.user.SeedService', 'services.SeedService');
my $seedServiceKey = ''; # will be determined from the input fcl file

use constant fclkey_TFileServiceFN => 'services.TFileService.fileName';
use constant fclkey_outModFMT => 'outputs.%s.fileName';

use constant outputfile_owner => 'MU2EGRIDDSOWNER';
use constant outputfile_conf => 'MU2EGRIDDSCONF';

#================================================================
sub doubleQuote($) {
    my ($fn) = @_;
    return  '"'.$fn.'"';
}

#================================================================
sub checkParameterValues($$) {
    my ($opt, $list) = @_;
    foreach my $a (@$list) {
        die "Error: parameter $a must be specified\n" unless defined $$opt{$a};
        my $val = $$opt{$a};
        die "Invalid value of parameter $a = '$val'"
            unless $val =~ /^\w[-\w]*$/;
    }
}

#================================================================
sub addEventID($$$$) {
    my ($fb, $run, $subrun, $maxEvents) = @_;
    my $dstblock = $ignoreSource ? "mu2emetadata" : "source";

    if($ignoreSource) {
        $$fb .= "mu2emetadata.ignoreSource: 1\n";
    }

    $$fb .=
        "$dstblock.firstRun: $run\n" .
        "$dstblock.firstSubRun: $subrun\n" .
        "$dstblock.maxEvents: $maxEvents\n";

}

sub addRandomSeed($$) {
    my ($fb, $usedSeeds) = @_;

    # art's RandomNumberGenerator_service restrict seeds to
    # not exceed 900000000.   Not clear if zero seed is OK
    # so we'll use a positive number up to the max.
    # Should leave space for SeedService to increment, thus
    # need to account for maxUniqueEngines.
    my $seedlimit= 900000000 - $maxUniqueEngines + 1;

    my $seed=0;
    while(!$seed) {
        $seed = int(rand($seedlimit));
        if($$usedSeeds{$seed}) {
            print STDERR "Skipping old seed $seed\n";
            redo;
        }
    }
    $$usedSeeds{$seed} = 1;

    $$fb .=
        $seedServiceKey . ".policy:  autoIncrement\n".
        $seedServiceKey . ".maxUniqueEngines: $maxUniqueEngines\n".
        $seedServiceKey . ".baseSeed: $seed\n";
}

#================================================================
sub sampleFileNames($) {
    my ($spec) = @_;

    my $res = [];

    if($spec->numFilesPerJob > 0) {

        die "--auxin requests too many files = ",$spec->numFilesPerJob,
        " for file list ",$spec->listFileName,"\n"
            unless $spec->numFilesPerJob <= 1+@{$spec->filenames};

        # do we have enough entries left?
        if(@{$spec->rsr} <= $spec->numFilesPerJob) {

            # Discard the leftovers, otherwise we may use
            # the same aux file twice in a single output fcl.
            @{$spec->rsr} = ();

            # refill @rsr
            for(my $i=0; $i<@{$spec->filenames}; ++$i) {
                push @{$spec->rsr}, $spec->filenames($i);
            }
        }

        for(my $i=0; $i<$spec->numFilesPerJob; ++$i) {
            my $index = int(rand($#{$spec->rsr}));
            push @$res, ${$spec->rsr($index)};
            splice @{$spec->rsr}, $index, 1;
        }
    }
    else {
        # use all files from the input list - no sampling
        push @$res, @{$spec->filenames};
    }

    return $res;
}

#================================================================
sub countFileLines($$) {
    my ($infile, $extractedDescription) = @_;
    my $count = 0;
    open(my $fh, '<',  $infile) or die "can not open $infile: $!";

    while(my $line = <$fh>) {
        ++$count;
        chomp($line);
        die "Input file list error: the line is empty or contains white spaces or other non-printable characters: \"$line\"\n"
            unless $line =~ /^\p{IsGraph}+$/;

        if($extractedDescription) {
            my  $fn = Mu2eFilename->parse(basename($line));
            $$extractedDescription = $fn->description unless $$extractedDescription;
            die "Error: inconsistent description field in input file list \"$infile\": got \""
                . $fn->description
                . "\" after seeing \""
                . $$extractedDescription
                . "\" earlier\n"
                unless $$extractedDescription eq $fn->description;
        }
    }

    close($fh);
    return $count;
}

sub getNextInputListChunk($$) {
    my ($inputfh, $chunkSize) = @_;
    my @res;
    my $line;
    for(my $count=0; ($count < $chunkSize) and ($line = <$inputfh>); ++$count) {
        chomp($line);
        die "Input file list error: the line is empty or contains white spaces or other non-printable characters: \"$line\"\n"
            unless $line =~ /^\p{IsGraph}+$/;
        push @res, $line;
    }
    return @res;
}

#================================================================
sub extractASequencer($) {
    my ($fnlist) = @_;

    die "extractASequencer() got empty inputs\n"
        unless $#$fnlist > -1;

    my @seqs;
    foreach my $fn (@$fnlist) {
        my  $p = Mu2eFilename->parse(basename($fn));
        push @seqs,$p->sequencer;
    }

    return (sort @seqs)[0];
}
#================================================================
sub addInputFileNames($$$$$) {
    my ($fb, $fclkey,$fclbind, $listref, $parentref) = @_;
    $$fb .= "$fclkey $fclbind [\n" . join(",\n", map  { doubleQuote($_) } @$listref ) . "\n]\n";
    push @$parentref, map  { basename($_) } @$listref;
    return $fclkey;
}

#================================================================
sub addAuxInPrologs($$$) {
    my ($fb, $specs, $parentref) = @_;

    my @fclinkeys;
    foreach my $ai (@$specs) {
        if($ai->prolog) {
            my $sample = sampleFileNames($ai);
            $$fb .= "BEGIN_PROLOG  # by generate_fcl\n";
            push @fclinkeys, addInputFileNames($fb, $ai->fclkey, '@protect_ignore:', $sample, $parentref);
            $$fb .= "END_PROLOG  # by generate_fcl\n\n";
        }
    }
    return @fclinkeys;
}
#================================================================
# fhicl-getpar allows worker node script to query parameter values.
# The names of @local variables are not directly accessible there, we
# need to create a fcl parameter for each @local var in order to get
# information about parents.
sub generateKeysForLocals($$) {
    my ($fb, $specs) = @_;
    my @fclkeys;
    foreach my $ai (@$specs) {
        if($ai->prolog) {
            my $key = 'mu2emetadata.fcl.prolog_values.' . $ai->fclkey;
            $$fb .= $key . ': @local::' . $ai->fclkey . "\n";
            push @fclkeys, $key;
        }
    }
    return @fclkeys;
}

#================================================================
sub addAuxInEpilogs($$$) {
    my ($fb, $specs, $parentref) = @_;

    my @fclinkeys;
    foreach my $ai (@$specs) {
        if(!$ai->prolog) {
            my $sample = sampleFileNames($ai);
            push @fclinkeys, addInputFileNames($fb, $ai->fclkey, ':', $sample, $parentref);
        }
    }
    return @fclinkeys;
}
#================================================================
sub resolveFHICLFile($) {
    my $templatespec = shift;

    my @pathdirs = split(/:/, $ENV{'FHICL_FILE_PATH'});
    foreach my $d(@pathdirs) {
        next if $d eq '';
        my $fn = $d . '/' . $templatespec;
        return $fn if -e $fn;
    }

    die "Error: can not locate template file \"$templatespec\" relative to FHICL_FILE_PATH="
        .$ENV{'FHICL_FILE_PATH'}."\n";
}

#================================================================
# Appends the content of the template file or the #include line
# to the output buffer.
sub processTemplate($$$) {
    my ($fb, $templatespec, $embed) = @_;

    if($embed) {

        my $templateresolved =
            -e $templatespec && $templatespec
            || resolveFHICLFile($templatespec);

        # Copy the content of the input template fcl.
        open(my $templfh, '<', $templateresolved) or die "Can not open \"$templateresolved\" $!\n";
        while(my $line = <$templfh>) {
            $$fb .= $line;
        }

        $$fb .=
            "\n#----------------------------------------------------------------\n".
            "# Code added by generate_fcl:\n";
    }
    else {
        $$fb .= '#include ' . doubleQuote($templatespec) . "\n\n";
    }
}

#================================================================
# execution starts here
my $defaultUser = getpwuid($EFFECTIVE_USER_ID);
$defaultUser =~ s/^mu2epro$/mu2e/; # standard datasets should be owned by "mu2e", not "mu2epro"

my @auxinputStrSpecs;

my %opt = ('dsowner' =>  $defaultUser,
           'auxinput' => \@auxinputStrSpecs,
           'max-engines' => \$maxUniqueEngines,
           'ignore-source' => \$ignoreSource,
    );

# Process command line opts.
GetOptions(\%opt,
           'description=s',
           'auto-description',
           'dsconf=s',
           'dsowner=s',
           'inputs=s',
           'merge-factor=i',
           'run-number=i',
           'first-subrun=i',
           'events-per-job=i',
           'njobs=i',
           'ignore-source',
           'old-seeds=s',
           'auxinput=s',
           'embed',
           'include',
           'debug-seed=i',
           'max-engines=i',
           'help',
           'verbose',
    )
    or die "\nError processing command line options.\n";

if($opt{'help'}) {
    print usage();
    exit 0;
}

my $verbose = $opt{'verbose'};
print "Final set of options:\n", Dumper( \%opt ), "\n"
    if($verbose);

if(defined $opt{'debug-seed'}) {
    srand($opt{'debug-seed'});
}

die "A single non-option arg must specify a template file. Try the --help option.\n"
    unless $#ARGV == 0;

my $templatespec = $ARGV[0];

die "Exactly one of --include or --embed must be specified.\n"
    unless ($opt{'embed'}//0) + ($opt{'include'}//0) == 1;

my $embed = $opt{'embed'} // 0;

#================================================================
# We need to keep the original relative filename of the template
# like "JobConfig/beam/beam_g4s1.fcl" for the #include directive
# but we also need a resolved name for fhicl-getpar.

# Check that the file to be included is findable relative to FHICL_FILE_PATH.
# For this use case template files should be under Offline, so our current
# environment is "similar enough" to the worker node one for this test
# to make sense.

my $templateresolved = $embed ?
    -e $templatespec && $templatespec
    || resolveFHICLFile($templatespec)
    : resolveFHICLFile($templatespec);

print "Resolved template file name = $templateresolved\n" if $verbose;

#----------------------------------------------------------------
my $srctype = `fhicl-getpar --string source.module_type $templateresolved`;
if($?) {
    die "Error running fhicl-getpar to determine source.module_type.\n";
}
chomp $srctype;
print "Got srctype = $srctype\n" if $verbose;

# optional TFileService output
my $ntscmd = "fhicl-getpar --string ".fclkey_TFileServiceFN." $templateresolved 2>/dev/null";
my $ntsoutstr = `$ntscmd`;
chomp $ntsoutstr;
print "Got ntsoutstr = $ntsoutstr\n" if $verbose;
my $ntsfn;
if($ntsoutstr ne '') {
    $ntsfn = Mu2eFilename->parse($ntsoutstr);
    die "Bad histo file name $ntsoutstr: expect extension .root\n" unless $ntsfn->extension eq 'root';
    die "Bad histo file name $ntsoutstr: expect data tier nts\n" unless $ntsfn->tier eq 'nts';
    $ntsfn->owner(outputfile_owner);
    $ntsfn->configuration(outputfile_conf);
}

# optional .art output files
my @all_outmods = `fhicl-getpar --keys outputs $templateresolved 2>/dev/null`;
chomp @all_outmods;
print "Got all_outmods = @all_outmods\n" if $verbose;

# Filter out output modules that are not active in the given configuration.
# Prepare a list of all active end path modules (outputs, but also analyzers).
my %endmodules;
my @endpaths = `fhicl-getpar --strlist physics.end_paths $templateresolved 2>/dev/null`;
chomp @endpaths;
foreach my $ep (@endpaths) {
    my @mods = `fhicl-getpar --strlist physics.$ep $templateresolved 2>/dev/null`;
    chomp @mods;
    for my $m (@mods) {
        print "Found end path module = $m\n" if $verbose;
        $endmodules{$m} = 1;
    }
}

# Do the filtering
my @active_outmods = grep { $endmodules{$_} } @all_outmods;

my %fwout;
foreach my $mod (@active_outmods) {
    my $cmd = sprintf "fhicl-getpar --string ".fclkey_outModFMT." $templateresolved 2>/dev/null", $mod;
    my $outfile = `$cmd`;
    if($?) {
        die "Error: no fileName for outputs.$mod\n";
    }
    chomp $outfile;
    print "$mod => $outfile\n" if $verbose;
    my $fn = Mu2eFilename->parse($outfile);
    die "Bad output file name $outfile: expect extension .art\n" unless $fn->extension eq 'art';
    $fn->owner(outputfile_owner);
    $fn->configuration(outputfile_conf);
    $fwout{$mod} = $fn;
}

# Determine whether SeedService is present: should we generate random seeds?
foreach my $ss (fclkey_SeedService) {
    next unless $ss;
    my $seedcmd = "fhicl-getpar --keys $ss $templateresolved 2>/dev/null";
    my @seedout = `$seedcmd`; chomp @seedout;
    if(@seedout) {
        $seedServiceKey = $ss;
        print "Will use seedServiceKey = $seedServiceKey: got @seedout from the query\n" if $verbose;
        last;
    }
}

my %usedSeeds;
if($seedServiceKey) {
    my $inseedfile = $opt{'old-seeds'} // '/dev/null';

    open(my $oldseeds, '<', $inseedfile) or die "Error opening input file $inseedfile: $!\n";
    while(my $line = <$oldseeds>) {
        chomp $line;
        next if $line eq '';
        die "Error: bad seed '$line'\n" unless $line =~ /^\d+$/;
        $usedSeeds{0 + $line} = 1;
    }
}
elsif(defined $opt{'old-seeds'}) {
    die "Error: the --old-seeds option will not have any effect because fcl config does not use the SeedService\n";
}

#----------------
# Handle the --auxinput options

my @auxin_specs;
foreach my $str (@auxinputStrSpecs) {

    my ($nfstr, $var, $listfile, $extra) = split(/:/, $str);

    die "Error in an --auxin specification: more than two ':'-s in \"$str\"\n" if defined $extra;
    die "Error in an --auxin specification: less than two ':'-s in \"$str\"\n" unless defined $listfile;

    my $numFiles;
    if($nfstr eq 'all') {
        $numFiles = 0;
    }
    elsif($nfstr =~ /^\d+$/) {
        $numFiles = 0+$nfstr;
        die "$numFiles = 0 is not valid in --auxin spec \"$str\".  Do you mean 'all'?\n" unless $numFiles;
    }
    else {
        die "Invalid numFiles in the --auxin spec $str\n";
    }

    my @auxfiles;
    open(my $fh, '<', $listfile) or die "Can not open for reading file \"$listfile\": $!\n";
    while(my $line = <$fh>) {
        chomp($line);
        die "Error in file $listfile: the line is empty or contains white spaces or other non-printable characters: \"$line\"\n"
            unless $line =~ /^\p{IsGraph}+$/;

        # Must be a Mu2e file name, as it will become an parent in the
        # provenance record of our output datasets. Check that it
        # satisfies the conventions.
        Mu2eFilename->parse(basename($line));

        push @auxfiles, $line;
    }

    my $prolog = 0;
    $prolog = 1 if($var =~ s/^\@// );

    my $spec = Mu2eAuxInSpec->new(
        numFilesPerJob=>$numFiles,
        fclkey=>$var,
        prolog=>$prolog,
        listFileName=>$listfile,
        filenames=>\@auxfiles,
        );

    push @auxin_specs, $spec;
}

#================================================================
# These arguments must always be provided

checkParameterValues(\%opt, ['dsowner', 'dsconf']);
my $dsowner = $opt{'dsowner'};
my $dsconf = $opt{'dsconf'};

my $description;  # for the auto case the value gets set just before the inputs processing loop.
if($opt{'auto-description'}) {
    if(defined $opt{'description'}) {
        die "Error: --description and --auto-description are mutually exclusive.\n";
    }
}
else {
    die "Error: either --description or --auto-description must be specified\n"
        unless defined $opt{'description'};

    checkParameterValues(\%opt, ['description']);
    $description = $opt{'description'};
}

# The set of required args depends on the fcl: e.g s1 needs run
# and subrun numbers but s2 does not, and can not use them.

my @emptySourceArgs = ('run-number', 'first-subrun', 'events-per-job', 'njobs');
my @fileInputsArgs = ('inputs', 'merge-factor');

#================================================================
my $numJobsPerOutdir = 1000;

sub getOutdirName($) {
    my ($num)= @_;
    my $subdir = sprintf "%03d", int($num / $numJobsPerOutdir);
    return $subdir;
}

sub makeOutdirs($) {
    my ($njobs)= @_;
    for(my $i=0; $i<$njobs; $i += $numJobsPerOutdir) {
        my $outdir = getOutdirName($i);
        print "Creating outdir $outdir\n" if $verbose;
        mkdir $outdir or die "Error creating output directory $outdir: $!\n";
    }
}

#================================================================
# some generated fcl files are large ( O(100K) ).
# pass their content by reference for efficiency, not because
# this function modifies it.
sub writeSpecificJSON($$$) {
    my ($fn,$fb, $parentref) = @_;

    my $fields = Mu2eFilename->parse(basename($fn));

    my $tier = $fields->tier;
    my $dsowner = $fields->owner;
    my $description = $fields->description;
    my $dsconf = $fields->configuration;
    my $seq = $fields->sequencer;
    my $datasetname = $fields->dataset->dsname;

    my $filesize = length($$fb);
    my $filebase = basename($fn);

    my $dig = Digest->new('SHA-256');
    $dig->add($$fb);
    my $sha256 = $dig->hexdigest;

    my $parentstr = @$parentref ?
        "[\n" . join(",\n", map  { ' 'x8 . doubleQuote($_) } @$parentref ) . "\n    ]"
        : "[]"
        ;

    my $jfn = $fn . ".json";
    open( my $json,  '>', $jfn ) or die "error opening output file $jfn: $!\n";

    print $json <<EOF
{
    "content_status": "good",
    "parents": $parentstr,
    "data_tier": "$tier",
    "dh.configuration": "$dsconf",
    "dh.dataset": "$datasetname",
    "dh.description": "$description",
    "dh.owner": "$dsowner",
    "dh.sequencer": "$seq",
    "dh.sha256": "$sha256",
    "file_format": "fcl",
    "file_name": "$filebase",
    "file_size": $filesize,
    "file_type": "mc"
}
EOF
    or die "Error printing to file $jfn: $!\n";

    close($json) or die "Can not close file \"$jfn\": $!\n";
}

#================================================================
sub setOutputFileNames($$) {
    my ($fb, $seq) = @_;

    my @fcloutkeys; # fcl keys for all output file name

    if(defined $ntsfn) {
        $ntsfn->sequencer($seq);
        my $histval = doubleQuote($ntsfn->basename);
        $$fb .= fclkey_TFileServiceFN .": $histval\n";
        push @fcloutkeys, fclkey_TFileServiceFN;
    }

    foreach my $mod (@active_outmods) {
        my $artkey = sprintf fclkey_outModFMT, $mod;
        $fwout{$mod}->sequencer($seq);
        my $afn = $fwout{$mod}->basename;
        my $artval = doubleQuote($afn);
        $$fb .= "$artkey : $artval\n";
        push @fcloutkeys, $artkey;
    }

    return \@fcloutkeys;
}
#----------------------------------------------------------------
# Generated part common to EmptySource and RootInput cases
sub printCommonTrailer($$$$) {
    my ($fb, $fclprologkeys, $fclinkeys, $fcloutkeys) = @_;

    $$fb .=
        "mu2emetadata.fcl.prologkeys: [ ". join(", ", map  { doubleQuote($_) } @$fclprologkeys )." ]\n".
        "mu2emetadata.fcl.inkeys: [ ". join(", ", map  { doubleQuote($_) } @$fclinkeys )." ]\n".
        'mu2emetadata.fcl.outkeys: [ '. join(', ',map  { doubleQuote($_) } @$fcloutkeys)." ]\n".
        "# End code added by generate_fcl:\n".
        "#----------------------------------------------------------------\n";
}
#================================================================
if($ignoreSource or ($srctype eq 'EmptyEvent')) {

    foreach my $k (@emptySourceArgs) {
        (defined $opt{$k} and $opt{$k} ne '' )
            or ($k eq 'first-subrun')
            or die "Error: --$k must be specified and nonempty for EmptySource fcl files or when --ignore-source is specified.  Try the --help option.\n";
    }

    foreach my $k (@fileInputsArgs, 'auto-description') {
        die "Error: --$k is not compatible with EmtpySource fcl file.  Try the --help option.\n"
            if(defined $opt{$k});
    }


    makeOutdirs($opt{'njobs'});

    for(my $i = 0; $i < $opt{'njobs'}; ++$i) {
        my $subrun = $i + ($opt{'first-subrun'} // 0);

        my $run = $opt{'run-number'};

        my $seq = sprintf "%06i_%08i", $run, $subrun;

        my $subdir = getOutdirName($i);
        my $fn =  "$subdir/cnf.$dsowner.$description.$dsconf.$seq.fcl";

        my $fclfb = ''; # a buffer to accumulate fcl file content
        my @parents;

        my @fclprologkeys;
        push @fclprologkeys, addAuxInPrologs(\$fclfb, \@auxin_specs, \@parents);

        processTemplate(\$fclfb, $templatespec, $embed);

        addEventID(\$fclfb, $run, $subrun, $opt{'events-per-job'});
        addRandomSeed(\$fclfb, \%usedSeeds) if $seedServiceKey;

        my @fclinkeys;
        push @fclinkeys, addAuxInEpilogs(\$fclfb,\@auxin_specs, \@parents);

        my $fcloutkeys = setOutputFileNames(\$fclfb, $seq);

        generateKeysForLocals(\$fclfb, \@auxin_specs);

        printCommonTrailer(\$fclfb, \@fclprologkeys, \@fclinkeys, $fcloutkeys);

        open( my $fh,  '>', $fn ) or die "error opening output file $fn: $!\n";
        print $fh $fclfb or die "Error printing to fcl file \"$fn\": $!\n";
        close($fh) or die "Can not close file \"$fn\": $!\n";

        writeSpecificJSON($fn, \$fclfb, \@parents);
    }

}
elsif(($srctype eq 'RootInput') or ($srctype eq 'FromCorsikaBinary')) {

    foreach my $k (@fileInputsArgs) {
        (defined $opt{$k} and $opt{$k} ne '' )
            or die "Error: --$k must be specified and nonempty for RootInput fcl files.  Try the --help option.\n";
    }

    foreach my $k (@emptySourceArgs) {
        die "Error: --$k is not compatible with RootInput fcl files.  Try the --help option.\n"
            if(defined $opt{$k});
    }

    my $inputSourceList = $opt{'inputs'};
    my $mergeFactor = $opt{'merge-factor'};

    my $extractDescription = $opt{'auto-description'} ? \$description: undef;
    my $njobs = 1 + int( (countFileLines($inputSourceList, $extractDescription) - 1)/ $mergeFactor);
    makeOutdirs($njobs);

    open(my $insrcfh, '<', $inputSourceList) or die "Can not open input file \"$inputSourceList\": $!\n";

    my $num = 0;
    while(my @chunk = getNextInputListChunk($insrcfh, $mergeFactor)) {

        my $seq = extractASequencer(\@chunk);

        my $subdir = getOutdirName($num++);
        my $fn =  "$subdir/cnf.$dsowner.$description.$dsconf.$seq.fcl";

        my $fclfb = ''; # a buffer to accumulate fcl file content
        my @parents;

        my @fclprologkeys;
        push @fclprologkeys, addAuxInPrologs(\$fclfb, \@auxin_specs, \@parents);

        processTemplate(\$fclfb, $templatespec, $embed);

        addRandomSeed(\$fclfb, \%usedSeeds) if $seedServiceKey;

        my @fclinkeys;

        # Set input file names
        push @fclinkeys, addInputFileNames(\$fclfb, "source.fileNames", ':', \@chunk, \@parents);

        push @fclinkeys, addAuxInEpilogs(\$fclfb, \@auxin_specs, \@parents);

        my $fcloutkeys = setOutputFileNames(\$fclfb, $seq);

        generateKeysForLocals(\$fclfb, \@auxin_specs);

        printCommonTrailer(\$fclfb, \@fclprologkeys, \@fclinkeys, $fcloutkeys);

        open( my $fh,  '>', $fn ) or die "error opening output file $fn: $!\n";
        print $fh $fclfb or die "Error printing to fcl file \"$fn\": $!\n";
        close($fh) or die "Can not close file \"$fn\": $!\n";

        writeSpecificJSON($fn, \$fclfb, \@parents);
    }

}
else {
    die "Error: unknown source.module_type = $srctype\n";
}

#================================================================
# Dump a list of all previously used seeds: the inputs list plus those
# we've generated in this invocation.  This file will be convenient to
# have if we want to add more statistics.

if(scalar keys %usedSeeds > 0) {
    my ($outseedfh, $outseedfn) = tempfile("seeds.$dsowner.$description.$dsconf.XXXX", SUFFIX => '.txt');
    for my $seed (sort {$a <=> $b} keys %usedSeeds) {
        print $outseedfh $seed, "\n"
            or die "Error printing the seeds: $!\n";
    }
    close($outseedfh) or die "Can not close file \"$outseedfn\": $!\n";
    chmod(0444, $outseedfn);
}

#================================================================
